import java.util.Iterator;

public class Lista<T> implements Iterable<T>{
    T[] datos; // vector generico de datos
    int total; // tamaño de la lista
    static int TOTAL_BASICO = 1000; // valor por defecto

    /**
     * Constructor por defecto
     */
    public Lista() {
        this.datos = (T[]) new Object[TOTAL_BASICO];
    }

    /**
     * Constructor con vector definido
     * @param data Los datos a ingresar en vector definido
     */
    public Lista(T[] data) {
        this.datos = data;
    }

    /**
     * Constructor con vector y tamaño definido 
     * @param datos Los datos a ingresar en vector definido
     * @param total Tamaño del vector ingresado
     */
    public Lista(T[] datos, int total) {
        this.datos = datos;
        this.total = total;
    }

    /**
     * Agrega un elemento al Listado
     * @param elemento
     */
    public void add(T elemento) {
        this.datos[this.total++] = elemento;
    }

    public T get(int indice) {
        return this.datos[indice];
    }

    public int size() {
        return this.total;
    }

    public void remove(int indice) {
        for (int i = indice; i < this.total - 1; i++) {
            this.datos[i] = this.datos[i + 1];
        }
        this.total--;
    }

    public void insert(T elemento, int indice) {
        for (int i = this.total; i > indice; i--) {
            this.datos[i] = this.datos[i - 1];
        }
        this.datos[indice] = elemento;
        this.total++;
    }

    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            @Override
            public boolean hasNext() {
                return false;
            }

            @Override
            public T next() {
                return null;
            }
        };
    }
}
